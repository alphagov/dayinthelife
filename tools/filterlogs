#!/usr/bin/env python

from __future__ import print_function

from collections import namedtuple
import csv
import fileinput
import hashlib
import os
import re
import socket
import struct
import sys

HERE = os.path.dirname(__file__)

BOTS_RE = re.compile(r'YandexBot|Pingdom.com_bot|MoodleBot|PaperLiBot|AdsBot-Google|FriendFeedBot|AhrefsBot|Magus Bot|TweetedTimes Bot|SkimBot|KomodiaBot|LinkedInBot|CareerBot|ShowyouBot|RSSIncludeBot|FeedlyBot|YoudaoBot|WASALive-Bot|r2iBot|HonBot|SurveyBot|FeedBot|aiHitBot|Sitekit.net Linkchecker Bot|yolinkBot|WikioBot|YodaoBot|TweetmemeBot|CukBot|PreviewBot|oBot')

GEOIP_BLOCKS    = open(os.path.join(HERE, 'data', 'GeoLiteCity-Blocks.csv'))
GEOIP_LOCATIONS = open(os.path.join(HERE, 'data', 'GeoLiteCity-Location.csv'))

GeoIpBlock = namedtuple('GeoIpBlock', 'start_ip end_ip loc_id')
GeoIpLocation = namedtuple('GeoIpLocation', 'id country region city postal_code latitude longitude metro_code area_code')

LineIn = namedtuple('LineIn', 'date time ip method uri status bytes time_taken referer user_agent cookie wafinfo')
LineOut = namedtuple('LineOut', 'time method uri status bytes time_taken referer uid location lat lon')
Location = namedtuple('Location', 'name lat lon')


class GeoIp(object):

    def __init__(self, blocks_fp, locations_fp):
        self._load_blocks_file(blocks_fp)
        self._load_locations_file(locations_fp)

    def ip_lookup(self, ip):
        ip_as_int = ip_to_int(ip)
        for b in self.blocks:
            if b.start_ip <= ip_as_int <= b.end_ip:
                return self.get_location(b.loc_id)
        return None

    def get_location(self, loc_id):
        return self.locations.get(loc_id)

    def _load_blocks_file(self, fp):
        self.blocks = []
        for line in csv.reader(fp):
            if len(line) == 3 and line[0] != 'startIpNum':
                start_ip, end_ip, loc_id = line
                block = GeoIpBlock(int(start_ip), int(end_ip), loc_id)
                self.blocks.append(block)

    def _load_locations_file(self, fp):
        self.locations = {}
        for line in csv.reader(fp):
            if len(line) == 9 and line[0] != 'locId':
                location = GeoIpLocation(*line)
                self.locations[location.id] = location

geoip = GeoIp(GEOIP_BLOCKS, GEOIP_LOCATIONS)

def ip_to_int(val):
    try:
        _str = socket.inet_pton(socket.AF_INET, val)
    except socket.error:
        raise ValueError
    return struct.unpack('!I', _str)[0]

def make_uid(*args):
    return hashlib.sha1('::'.join(args)).hexdigest()

def find_location(ip):
    return geoip.ip_lookup(ip)

def process(line):
    i = LineIn(*line)

    if re.match(BOTS_RE, i.user_agent):
        return

    time = i.date + 'T' + i.time
    uid = make_uid(i.ip, i.user_agent)
    loc = find_location(i.ip)

    o = LineOut(
        time,
        i.method,
        '/' + '/'.join(i.uri.split('/')[2::]), # turn /www-origin.production.alphagov.co.uk/search/opensearch.xml into /search/opensearch.xml
        i.status,
        i.bytes,
        i.time_taken,
        i.referer,
        uid,
        loc.city,
        loc.latitude,
        loc.longitude
    )

    return o


def main():
    writer = csv.writer(sys.stdout)
    for line in csv.reader(fileinput.input(), delimiter='\t'):
        res = process(line)
        if res is not None:
            writer.writerow(res)

if __name__ == '__main__':
    main()
